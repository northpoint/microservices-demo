parameters:
- name: tag   # tag/version
  default: 'latest'
- name: acrRepo # repo name for the service
  default: ''
- name: dockerfilePath
  default: ''
- name: containerRegistrySvcConn  # acr svc conn
  default: 'acr-svcconn'
- name: buildContext    # build context for docker build, depends on service
  default: '**'
- name: artifact
  default: ''

jobs:
- job: DockerBuild
  steps:
    - task: DownloadPipelineArtifact@2
      displayName: Downloading Artifacts
      inputs:
        buildType: 'current'
        artifactName: '${{ parameters.artifact }}'
        targetPath: '${{ parameters.buildContext }}'

    - task: Docker@2
      displayName: Build docker image
      inputs:
        containerRegistry: ${{ parameters.containerRegistrySvcConn }}      
        command: 'build'
        Dockerfile: '${{ parameters.dockerfilePath }}'
        buildContext: '${{ parameters.buildContext }}'
        repository: '${{ parameters.acrRepo }}'
        tags: '${{ parameters.tag }}'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy


          trivy --format template --template "@contrib/junit.tpl" -o junit-report.xml kubefoundationacr.azurecr.io/${{ parameters.acrRepo }}:${{ parameters.tag }} 
      displayName: Aquasec Trivy Container Scan
      
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd $HOME/Library/Caches/trivy
          ls;
    - task: PublishTestResults@2
      displayName: Publish Scan Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report*.xml'
        failTaskOnFailedTests: false
      condition: 'always()'
    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        containerRegistry: ${{ parameters.containerRegistrySvcConn }}
        repository: '${{ parameters.acrRepo }}'
        command: 'push'
        tags: '${{ parameters.tag }}'

