parameters:
- name: tag   # tag/version
  default: 'latest'
- name: acrRepo # repo name for the service
  default: ''
- name: dockerfilePath
  default: ''
- name: containerRegistrySvcConn  # acr svc conn
  default: 'acr-svcconn'
- name: buildContext    # build context for docker build, depends on service
  default: '**'
- name: artifact
  default: ''
- name: acrName
  default: 'kubefoundationacr.azurecr.io'

jobs:
- job: DockerBuild
  steps:
    - task: DownloadPipelineArtifact@2
      displayName: Downloading Artifacts
      inputs:
        buildType: 'current'
        artifactName: '${{ parameters.artifact }}'
        targetPath: '${{ parameters.buildContext }}'

    - task: Docker@2
      displayName: Build docker image
      inputs:
        containerRegistry: ${{ parameters.containerRegistrySvcConn }}      
        command: 'build'
        Dockerfile: '${{ parameters.dockerfilePath }}'
        buildContext: '${{ parameters.buildContext }}'
        repository: '${{ parameters.acrRepo }}'
        tags: '${{ parameters.tag }}'

    - task: Bash@3
      displayName: Create junit template
      inputs:
        targetType: 'inline'
        script: |
          cat > junit.tpl << EOF
          <?xml version="1.0" ?>
          <testsuites>
          {{- range . -}}
          {{- \`$`failures := len .Vulnerabilities }}
              <testsuite tests="1" failures="{{ \`$`failures }}" time="" name="{{  .Target }}">
              {{- if not (eq .Type "") }}
                  <properties>
                      <property name="type" value="{{ .Type }}"></property>
                  </properties>
                  {{- end -}}
                  {{ range .Vulnerabilities }}
                  <testcase classname="{{ .PkgName }}-{{ .InstalledVersion }}" name="[{{ .Vulnerability.Severity }}] {{ .VulnerabilityID }}" time="">
                      <failure message={{escapeXML .Title | printf "%q" }} type="description">{{escapeXML .Description | printf "%q" }}</failure>
                  </testcase>
              {{- end }}
              </testsuite>
          {{- end }}
          </testsuites>
          EOF

    - task: Bash@3
      displayName: Aquasec Trivy Container Scan
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          trivy image --format template --template "@junit.tpl" -o junit-report.xml ${{ parameters.acrName }}/${{ parameters.acrRepo }}:${{ parameters.tag }} 


    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '/home/vsts/work/1/s/junit.tpl'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: 'always()'

    - task: PublishTestResults@2
      displayName: Publish Scan Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report*.xml'
        failTaskOnFailedTests: false
      condition: 'always()'

    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        containerRegistry: ${{ parameters.containerRegistrySvcConn }}
        repository: '${{ parameters.acrRepo }}'
        command: 'push'
        tags: '${{ parameters.tag }}'

