# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  kubernetesSvcConn: 'aks-svcconn'
  # tenantID: 
  # clientID: 
  # clientSecret:
stages:
- stage: PromOperatorDeploy
  displayName: Prometheus Operator Deplooy
  jobs:  
  - job: AddConfigMap
    steps:
    - task: Kubernetes@1
      displayName: Applying dashboards via configmap
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(kubernetesSvcConn)'
        namespace: 'monitoring'
        command: 'apply'
        arguments: '-f $(System.DefaultWorkingDirectory)/graphs/sock-shop-dashboards-cm.yaml'
        
  - job: PromOperatorDeploy
    steps:
    - task: HelmDeploy@0
      displayName: Prom Operator Repo Add
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '$(kubernetesSvcConn)'
        command: 'repo'
        arguments: 'add stable https://kubernetes-charts.storage.googleapis.com'
    - task: HelmDeploy@0
      displayName: Prom Operator Deploy
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '$(kubernetesSvcConn)'
        namespace: 'monitoring'
        command: 'upgrade'
        chartType: 'Name'
        chartName: 'stable/prometheus-operator'
        releaseName: 'monitoring'
        failOnStderr: false # ignore crd warning
        arguments: >
          --create-namespace
          --set grafana.plugins[0]=grafana-piechart-panel

 