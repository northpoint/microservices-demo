# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  kubernetesSvcConn: 'aks-svcconn'
  
  # ---- for grafana datasource
  # subscriptionId: ''
  # tenantId: ''
  # clientId: ''
  # workspace: ''
  # secret: ''
  # grafanaAdminPassword: ''


steps:
  - task: HelmDeploy@0
    displayName: Deploying additional configmaps
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: '$(kubernetesSvcConn)'
      command: 'upgrade'
      chartType: 'FilePath'
      namespace: 'monitoring'
      chartPath: './graphs/grafana-configmaps/'
      releaseName: 'grafana-configmaps'
      failOnStderr: true
      arguments: >
        --set subscriptionId=$(subscriptionId)
        --set tenantId=$(tenantId)
        --set clientId=$(clientId)
        --set workspace=$(workspace)
        --set secret=$(secret)
  - task: HelmDeploy@0
    displayName: Prom Operator Repo Add
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceConnection: '$(kubernetesSvcConn)'
      command: 'repo'
      arguments: 'add stable https://kubernetes-charts.storage.googleapis.com'
  - task: HelmDeploy@0
    displayName: Prom Operator Deploy
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceConnection: '$(kubernetesSvcConn)'
      namespace: 'monitoring'
      command: 'upgrade'
      chartType: 'Name'
      chartName: 'stable/prometheus-operator'
      releaseName: 'monitoring'
      failOnStderr: false # ignore crd warning
      arguments: >
        --create-namespace
        --values ./graphs/grafana-override.yaml
        --set grafana.adminPassword=$(grafanaAdminPassword)
